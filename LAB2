
#include<fstream>
#include<string>
#include<queue>
#include<iostream>
#include<stack>
#include<ctype.h>

using namespace std;

const string KeyWord[32] = {
        "auto", "break", "case","char",
        "const", "continue", "default", "do",
        "double", "else", "enum", "extern",
        "float", "for", "goto", "if",
        "int", "long", "register", "return",
        "short", "signed", "sizeof", "static",
        "struct", "switch", "typedef", "union",
        "unsigned", "void", "volatile", "while"
};

struct FileInclude
{
    int sum = 0;
    int sum_switch_case = 0;
    int sum_if_else = 0;
    int sum_if_elseif_else = 0;
    int sum_case[100] = {0};
    int case_number = 0;
};

int main()
{
    void MyCout( FileInclude &f,int r );
    void Match( FileInclude &F, string f_w, queue<string> & S ,fstream &fin );
    void KeywordqueueMatch( FileInclude &F, queue<string> & S );
    void BackslashSolve( string & f_n );
    int r;
    string f_n ;
    cout<<"请输入文件地址：";
    cin>>f_n;
    cout<<"请输入完成等级：";
    cin>>r;

    BackslashSolve( f_n );
    string f_w="";
    fstream fin;
    fin.open(f_n.c_str(), ios::in );
    bool flag = 0;
    FileInclude f;
    queue<string> keyword_queue;

    Match( f, f_w, keyword_queue ,fin );
    KeywordqueueMatch(f,keyword_queue);
    MyCout(f,r);
    fin.close();

}

void BackslashSolve( string & f_n)
{
    int s = f_n.length();
    stack <char> temp;
    while(s--)
    {
        temp.push(f_n[s]);
    }
    f_n ="";
    while(!temp.empty())
    {
        f_n+=temp.top();
        if(temp.top() == '\\')
            f_n += '\\';
        temp.pop();
    }
}


void KeywordqueueMatch(FileInclude &f,queue<string> & keyword_queue)
{
    int i = 0,j = 0;
    stack <string> temp;
    while(!keyword_queue.empty())
    {
        if(keyword_queue.front() == "if")
        {
            temp.push(keyword_queue.front());
            keyword_queue.pop();
        }
        else if(keyword_queue.front() == "elseif")
        {
            temp.push(keyword_queue.front());
            keyword_queue.pop();
        }
        else if(keyword_queue.front() == "else")
        {
            if(temp.top() == "if")
            {
                i++;
                f.sum_if_else++;
                temp.pop();
            }
            else
            {

                while(temp.top() == "elseif" && !temp.empty())
                {
                    temp.pop();
                }
                if(!temp.empty())
                {
                    j++;
                    f.sum_if_elseif_else++;
                    temp.pop();
                }
            }
            keyword_queue.pop();

        }

        else if(keyword_queue.front() == "switch")
        {
            keyword_queue.pop();

            while((keyword_queue.front() == "case" || keyword_queue.front() == "break" || keyword_queue.front() == "default") && !keyword_queue.empty())
            {
                if(keyword_queue.front() == "case")
                    f.sum_case[f.case_number]++;

                keyword_queue.pop();
            }
            f.case_number++;
        }
        else
        {
            keyword_queue.pop();
        }
    }
}

void MyCout(FileInclude &f,int r)
{
    void cout2(FileInclude &f);
    void cout3(FileInclude &f);
    void cout4(FileInclude &f);

    cout<<"total num: "<<f.sum<<endl;
    if(r == 2)
        cout2(f);
    else if(r == 3)
    {
        cout2(f);
        cout3(f);
    }
    else
    {
        cout2(f);
        cout3(f);
        cout4(f);
    }
}

void cout2(FileInclude &f)
{
    int i = f.case_number;
    int j = 0;
    cout<<"switch num: "<<f.sum_switch_case<<endl;
    cout<<"case num: ";
    while(i--)
    {
        cout<<f.sum_case[j]<<' ';
        j++;
    }
    cout<<endl;
}
void cout3(FileInclude &f)
{
    cout<<"if-else num: "<<f.sum_if_else<<endl;
}
void cout4(FileInclude &f)
{
    cout<<"if-elseif-else num: "<<f.sum_if_elseif_else<<endl;
}


void Match(FileInclude &f, string f_w, queue<string> &keyword_queue, fstream &fin )
{

    while(fin>>f_w)
    {
        if(f_w[0] == '/' && f_w[1] == '/' )
        {
            cout<<"//	"<<f_w<<endl;
            getline(fin,f_w); 
            fin>>f_w;
        }
        else if(f_w[0] == '/' && f_w[1] == '*')
        {
            while(fin>>f_w)
            {
                if(f_w[f_w.size()-2] == '*' && f_w[f_w.size()-1] == '/')
                {
                    break;
                }
            }
        }
        int index = 0;
        int size_f_w = f_w.size();
        string temp_string;
        for( int i = 0; i<size_f_w-1; i++ )
        {
            if( !isalpha(f_w[i]) && isalpha(f_w[i+1]) )
                index = i+1;

            if( ( isalpha(f_w[i]) && !isalpha(f_w[i+1]) ) || ( i+1 == size_f_w-1 && isalpha(f_w[i+1]) ))
            {

                if( ( isalpha(f_w[i]) && !isalpha(f_w[i+1]) ) )
                    temp_string = f_w.substr(index,i+1-index);

                else
                    temp_string = f_w.substr(index,i+2-index);

                for( int j = 0; j < 32; j++ )
                {
                    if( temp_string == KeyWord[j] )
                    {
                        if( temp_string != "else")
                        {
                            keyword_queue.push( temp_string );
                            f.sum++;
                            if( temp_string == "switch")
                                f.sum_switch_case++;
                        }
                        else
                        {
                            f.sum++;
                            if(f_w[4] == '{')		
                            {
                                keyword_queue.push("else");
                            }
                            else{
                                fin>>f_w;
                                i++;
                                if( ( f_w[0] == 'i' && f_w[1] == 'f' && f_w[2] == '(') || f_w == "if" )
                                {
                                    keyword_queue.push("elseif");
                                    f.sum++;
                                }
                            }
                        }
                        break;
                    }
                }
                index = 0;
                break;
            }
        }
    }
}
